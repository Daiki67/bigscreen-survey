Jours de développement:

Jour 1: Initialisation du projet & rédaction du cahier de charge (5h)
Jour 2: Structuration de la base de données (5h)
Jour 3: Création des seeders & des factories (5h)
Jour 4: Création du controller SurveyController pour l'enregistrement des réponses sous une url_token, voir les questions et voir les réponses liées à une url (9h)
Jour 5: Création du controller DashboardController pour les données des Chart
Jour 6: Création du controller AnswerController pour l'affichage des réponses
Jour 7: Mise en place des seeders et des factories
Jour 8: Tests, corrections des bugs côté backend
Jour 9: Création de la page du formulaire de questions côté frontend (survey form)
Jour 10: Récupération des données depuis la base de données (Questions & Réponses utilisateurs)
Jour 11: Création de la function auth dans le AuthController et fixation du bug du 401 Unauthorized au niveau frontend concernant les routes administrateur
Jour 12: Configuration de la guard et de l'instance axios pour la base de l'url de api et également afin d'intercepter les requêtes pour permettre l'affichage du loader
jour 13: Ajout de apexcharts pour les différents graphiques
Jour 14: Reconfiguration des données des seeders pour la table answers dans le AnswerSeeder.php
Jour 15: Work in Progress: Fixation des données des seeders de la table answers
Jour 16: Affichage des réponses utilisateurs dans la page réponses de l'administrateur
Jour 17: Fixation concernant l'affichage des réponses utilisateurs côté frontend
Jour 18: Affichage dynamique des questions et des inputs & récupérations des données du formulaire entrées par l'utilisateur
Jour 19: Récupération des données entrées par l'utilisateur & envoie vers la base de données via l'api ainsi que la configuration du props pour la construction du lien dynamique de la réponse utilisateur
Jour 20: Work In Progress: Affichage dynamique du sondé via le lien contenant l'UrlToken
Jour 21:

Commandes utilisées lors du développement:

- laravel new backend_laravel
- npm create vue@latest
- cd frontend_vuejs
- npm install
- npm run format
- git init
- git add .
- git commit -m "Initial commit for the project"
- git add remote https://github.com/Daiki67/bigscreen-survey.git
- git push -u origin master
- composer require laravel/sanctum
- php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"
- php artisan install:api
- php artisan config:publish cors
- php artisan make:controller AuthController
- php artisan make:resource UserResource
- php artisan make:resource User --collection
- php artisan make:resource UserCollection
- php artisan make:controller UserController
- php artisan make:controller CheckUserController
- php artisan make:controller CheckAdminController
- php artisan make:model Question -a
- php artisan make:model Submission -a
- php artisan make:model Answer -a
- php artisan make:resource QuestionResource
- php artisan make:resource AnswerResource
- php artisan make:resource SubmissionResource
- php artisan make:resource PieChartDataResource
- php artisan make:resource RadarChartDataResource
- php artisan db:seed
- php artisan db:seed --class=AnswerSeeder
- npm install axios
- npm install apexcharts vue3cd-apexcharts --save
- composer require darkaonline/l5-swagger
- php artisan vendor:publish --provider "L5Swagger\L5SwaggerServiceProvider"
- php artisan l5-swagger:generate   (/api/documentation)
- 

Resources utilisées lors du développement:

§Backend
 - https://laravel.com/docs/12.x
 - https://laravel.com/docs/12.x/sanctum#main-content
 - https://laravel.com/docs/12.x/eloquent
 - https://laravel.com/docs/12.x/routing#route-group-controllers
 - https://laravel.com/docs/12.x/controllers
 - 

§Frontend
 - https://vuejs.org/guide/quick-start.html
 - 


Journal des erreurs:

 - BadMethodCallException
Method Illuminate\Validation\Validator::validateRequire does not exist.

R: Revoir l'état de validation du formulaire.

- utils.js:19  GET http://localhost:8000/api/admin/auth 401 (Unauthorized)

R: Ajouter le token dans les headers et vérifier l'espacement au niveau de Bearer.
Ex: 
Avant: 'Bearer'
Après: 'Bearer '

- axios.js:13 Uncaught ReferenceError: Cannot access 'getAccessToken' before initialization
    at axios.js:13:40
(anonymous)	@	axios.js:13

R: Définir le token (getAccessToken) avant la vérification dans  

- AxiosError
 {message: 'Request failed with status code 405', name: 'AxiosError', code: 'ERR_BAD_REQUEST', config: {…}, request: XMLHttpRequest, …}

R: Vérifier la méthode utilisée lors de l'appel de l'Api avec axios au niveau du frontend

- POST http://localhost:8000/api/admin/logout 401 (Unauthorized)
R: Mise en place de la vérification de la disponobilité du token dans le navigateur et configuration de la redirection par conséquent dans le index.ts

- main.ts:9 [Vue warn]: Invalid prop: type check failed for prop "ChartTitle". Expected String with value "undefined", got Undefined  
  at <ChartCard ChartType="radar" ChartOptions= 
{height: 350, type: 'radar'}

 main.ts:9 [Vue warn]: Missing required prop: "ChartOption" 
  at <ChartCard ChartType="radar" ChartOptions= 
{height: 350, type: 'radar'}
 ChartSeries= [{…}]... > 

 Erreur de la lecture des propriétés de apexcharts

 R: Revoir les props (assignation du type de la variable dans le composant)